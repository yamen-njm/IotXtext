// automatically generated by Xtext
grammar edu.univ.nantes.iot.IotDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/iotModel" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Network returns Network:
	'Network'
	'{'
		('name' name=ID)?
		'brokerconf' brokerconf=BrokerConf
		('measure' '{' measure+=Measure ( "," measure+=Measure)* '}' )?
		('instrument' '{' instrument+=Instrument ( "," instrument+=Instrument)* '}' )?
		('measurand' '{' measurand+=Measurand ( "," measurand+=Measurand)* '}' )?
		('device' '{' device+=Device ( "," device+=Device)* '}' )?
		
	'}';


Measure returns Measure:
	{Measure}
	
	
		('name' name=ID)?
		('type' type=DataType)?
	;

Instrument returns Instrument:
	
	
		('name' name=ID)?
		'interest' '{' interet+=Interest ( "," interet+=Interest)* '}' 
	;

Measurand returns Measurand:
	{Measurand}
	
	
		('name' name=ID)?
	;

Device returns Device:
	
	
		('name' name=ID)?
		'instrument' '(' instrument+=[Instrument] ( "," instrument+=[Instrument])* ')' 
		('binding' '{' binding+=Binding ( "," binding+=Binding)* '}' )?
	
;

BrokerConf returns BrokerConf:
	{BrokerConf}
	
	'{' 
		('name' name=ID)?
		('server' server=QualifiedName)?
		('user' user=QualifiedName)?
		('port' port=Integer)?
		('password' password=QualifiedName)?
		('sslPort' sslPort=Integer)?
		('webSocketsPort' webSocketsPort=Integer)?
		('connectionLimit' connectionLimit=Integer)?
		
	'}';



QualifiedName returns ecore::EString: 
    ID ('.' ID)*;

//ID returns type::String:
//	'String' /* TODO: implement this rule and an appropriate IValueConverter */;

Interest returns Interest:
	
		('name' name=ID)?
		'features' '{' features+=Features ( "," features+=Features)* '}' 
	 ;

Features returns Features:
	{Features}
		('name' name=ID)?
		('measure' measure=[Measure|QualifiedName])?
		('mode' mode=Mode)?	
	;

enum Mode returns Mode:
				INPUT = 'INPUT' | OUTPUT = 'OUTPUT';

Binding returns Binding:
	{Binding}
	
	
		('name' name=ID)?
		('measurand' measurand=[Measurand])?
		('features' features=[Features|QualifiedName])?
	;

Integer returns type::Integer:
	INT /* TODO: implement this rule and an appropriate IValueConverter */;





enum DataType returns DataType:
				boolean = 'boolean' | string = 'String' | number = 'number' | date = 'date' ;
