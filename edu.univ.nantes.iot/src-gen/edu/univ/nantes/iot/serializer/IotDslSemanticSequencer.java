/*
 * generated by Xtext 2.16.0
 */
package edu.univ.nantes.iot.serializer;

import com.google.inject.Inject;
import edu.univ.nantes.iot.services.IotDslGrammarAccess;
import iotModel.Binding;
import iotModel.BrokerConf;
import iotModel.Device;
import iotModel.Features;
import iotModel.Instrument;
import iotModel.Interest;
import iotModel.IotModelPackage;
import iotModel.Measurand;
import iotModel.Measure;
import iotModel.Network;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class IotDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private IotDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == IotModelPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case IotModelPackage.BINDING:
				sequence_Binding(context, (Binding) semanticObject); 
				return; 
			case IotModelPackage.BROKER_CONF:
				sequence_BrokerConf(context, (BrokerConf) semanticObject); 
				return; 
			case IotModelPackage.DEVICE:
				sequence_Device(context, (Device) semanticObject); 
				return; 
			case IotModelPackage.FEATURES:
				sequence_Features(context, (Features) semanticObject); 
				return; 
			case IotModelPackage.INSTRUMENT:
				sequence_Instrument(context, (Instrument) semanticObject); 
				return; 
			case IotModelPackage.INTEREST:
				sequence_Interest(context, (Interest) semanticObject); 
				return; 
			case IotModelPackage.MEASURAND:
				sequence_Measurand(context, (Measurand) semanticObject); 
				return; 
			case IotModelPackage.MEASURE:
				sequence_Measure(context, (Measure) semanticObject); 
				return; 
			case IotModelPackage.NETWORK:
				sequence_Network(context, (Network) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Binding returns Binding
	 *
	 * Constraint:
	 *     (name=ID? measurand=[Measurand|ID]? features=[Features|QualifiedName]?)
	 */
	protected void sequence_Binding(ISerializationContext context, Binding semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BrokerConf returns BrokerConf
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         server=QualifiedName? 
	 *         user=QualifiedName? 
	 *         port=Integer? 
	 *         password=QualifiedName? 
	 *         sslPort=Integer? 
	 *         webSocketsPort=Integer? 
	 *         connectionLimit=Integer?
	 *     )
	 */
	protected void sequence_BrokerConf(ISerializationContext context, BrokerConf semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Device returns Device
	 *
	 * Constraint:
	 *     (name=ID? instrument+=[Instrument|ID] instrument+=[Instrument|ID]* (binding+=Binding binding+=Binding*)?)
	 */
	protected void sequence_Device(ISerializationContext context, Device semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Features returns Features
	 *
	 * Constraint:
	 *     (name=ID? measure=[Measure|QualifiedName]? mode=Mode?)
	 */
	protected void sequence_Features(ISerializationContext context, Features semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Instrument returns Instrument
	 *
	 * Constraint:
	 *     (name=ID? interet+=Interest interet+=Interest*)
	 */
	protected void sequence_Instrument(ISerializationContext context, Instrument semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interest returns Interest
	 *
	 * Constraint:
	 *     (name=ID? features+=Features features+=Features*)
	 */
	protected void sequence_Interest(ISerializationContext context, Interest semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Measurand returns Measurand
	 *
	 * Constraint:
	 *     name=ID?
	 */
	protected void sequence_Measurand(ISerializationContext context, Measurand semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Measure returns Measure
	 *
	 * Constraint:
	 *     (name=ID? type=DataType?)
	 */
	protected void sequence_Measure(ISerializationContext context, Measure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Network returns Network
	 *
	 * Constraint:
	 *     (
	 *         name=ID? 
	 *         brokerconf=BrokerConf 
	 *         (measure+=Measure measure+=Measure*)? 
	 *         (instrument+=Instrument instrument+=Instrument*)? 
	 *         (measurand+=Measurand measurand+=Measurand*)? 
	 *         (device+=Device device+=Device*)?
	 *     )
	 */
	protected void sequence_Network(ISerializationContext context, Network semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
